import pygame as pg
from sys import exit
from os import path

# Pg init
pg.init()
display_surface = pg.display.set_mode((432, 288))
clock = pg.time.Clock()

# Room data
room = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
]

# Dummy ground region
tile_sprite_sheet_region = pg.Rect(0, 0, 18, 18),

# Collect tiles to be rendered and also change 1 into rect in room array
solid_tiles_rects_lists = []
for y in range(16):
    for x in range(27):
        # Get index
        index = y * 27 + x

        # Index -> 0 / 1
        cell_value = room[index]

        # Get rect topleft
        left = x * 18
        top = y * 18

        # 1?
        if cell_value == 1:

            # Replace the 1 with rect
            tile_rect = pg.Rect(left, top, 18, 18)
            room[index] = tile_rect

            # Fill solid_tiles_rects_lists
            solid_tiles_rects_lists.append(tile_rect)

# Player sprite data
player_frame = 0
player_sprite_sheet_region_list = [
    pg.Rect(360, 0, 24, 24),
    pg.Rect(384, 0, 24, 24),
]
player_rect = pg.Rect(0, 0, 24, 24)

# Load sprite sheet
sprite_sheet_path = path.join('sprite_sheets', 'sprite_sheet.png')
sprite_sheet_surface = pg.image.load(sprite_sheet_path).convert_alpha()


while 1:
    # Max 60 fps
    clock.tick(60)

    # Window closed? quit
    for event in pg.event.get():
        if event.type == pg.QUIT:
            pg.quit()
            exit()

    # Clear display_surface
    display_surface.fill("blue4")

    # Update
    pressed = pg.key.get_pressed()
    direction_x = pressed[pg.K_RIGHT] - pressed[pg.K_LEFT]
    direction_y = pressed[pg.K_DOWN] - pressed[pg.K_UP]

    # Player position snapped to topleft tile unit
    player_tile_x = player_rect.centerx // 18
    player_tile_y = player_rect.centery // 18

    # Possible positions
    player_tl = (player_tile_x - 1, player_tile_y - 1)
    player_tt = (player_tile_x, player_tile_y - 1)
    player_tr = (player_tile_x + 1, player_tile_y - 1)
    player_ml = (player_tile_x - 1, player_tile_y - 0)
    player_mr = (player_tile_x + 1, player_tile_y - 0)
    player_bl = (player_tile_x - 1, player_tile_y + 1)
    player_bm = (player_tile_x, player_tile_y + 1)
    player_br = (player_tile_x + 1, player_tile_y + 1)

    # Filter the ones needed with direction
    direction_to_locations = {
        # No movement
        (0, 0): [],

        # Up
        (0, -1): [player_tl, player_tt, player_tr],

        # Up-Right
        (1, -1): [player_tl, player_tt, player_tr, player_mr, player_br],

        # Right
        (1, 0): [player_tr, player_mr, player_br],

        # Down-Right
        (1, 1): [player_bl, player_bm, player_br, player_mr, player_tr],

        # Down
        (0, 1): [player_bl, player_bm, player_br],

        # Down-Left
        (-1, 1): [player_tl, player_ml, player_bl, player_bm, player_br],

        # Left
        (-1, 0): [player_tl, player_ml, player_bl],

        # Up-Left
        (-1, -1): [player_bl, player_ml, player_tl, player_tt, player_tr]
    }

    # Get the possible locations based on direction
    filtered_possible_locations = direction_to_locations.get(
        (direction_x, direction_y), [])

    # Check filtered_possible_locations
    possible_collision_tiles_rects_list = []
    for location in filtered_possible_locations:
        possible_location_x = location[0]
        possible_location_y = location[1]

        # Clamp withing room
        possible_location_x = max(min(possible_location_x, 26), 0)
        possible_location_y = max(min(possible_location_y, 15), 0)

        # Position -> index
        index = possible_location_y * 27 + possible_location_x

        # Index -> 0 / 1
        cell_value = room[index]

        # Ignore empty
        if cell_value == 0:
            continue

        # Found rect?
        possible_collision_tiles_rects_list.append(cell_value)

    # Check horizontal coast is clear?
    player_rect_copy_horizontal = player_rect.copy()
    player_rect_copy_horizontal.left += direction_x

    # Collide?
    for rect in possible_collision_tiles_rects_list:
        if player_rect_copy_horizontal.colliderect(rect):
            direction_x = 0
            break

    # Check vertical coast is clear?
    player_rect_copy_vertical = player_rect.copy()
    player_rect_copy_vertical.top += direction_y

    # Collide?
    for rect in possible_collision_tiles_rects_list:
        if player_rect_copy_vertical.colliderect(rect):
            direction_y = 0
            break

    # Move
    player_rect.left += direction_x
    player_rect.top += direction_y

    # Render room
    for solid_tile_rect in solid_tiles_rects_lists:
        display_surface.blit(
            sprite_sheet_surface,
            solid_tile_rect.topleft,
            tile_sprite_sheet_region
        )

    # Render player
    display_surface.blit(
        sprite_sheet_surface,
        player_rect.topleft,
        player_sprite_sheet_region_list[player_frame]
    )

    pg.display.update()
